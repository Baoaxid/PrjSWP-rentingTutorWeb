import express from 'express';
import bcrypt from 'bcryptjs';
import { sql, poolPromise } from '../db.js';

const router = express.Router();
const SALT_ROUNDS = 10;

// Function to handle student registration
router.post('/student', async (req, res) => {
  try {
    const { fullName, email, password, phone, address, dateOfBirth } = req.body;
    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);
    const pool = await poolPromise;

    const request = pool.request();
    request.input('fullName', sql.NVarChar, fullName);
    request.input('email', sql.NVarChar, email);
    request.input('passwordHash', sql.NVarChar, hashedPassword);
    request.input('phone', sql.NVarChar, phone);
    request.input('address', sql.NVarChar, address);
    request.input('dateOfBirth', sql.Date, dateOfBirth);
    request.input('role', sql.Int, 1); // Assuming 1 is the role for students
    request.input('emailVerifyToken', sql.NVarChar, '');
    request.input('forgotPasswordToken', sql.NVarChar, '');
    request.input('verify', sql.Int, 0); // Assuming 0 is the default verify status

    await request.query(`
      INSERT INTO Users (fullName, email, passwordHash, phone, address, dateOfBirth, role, emailVerifyToken, forgotPasswordToken, verify)
      VALUES (@fullName, @email, @passwordHash, @phone, @address, @dateOfBirth, @role, @emailVerifyToken, @forgotPasswordToken, @verify)
    `);

    res.status(201).json({ message: 'Student registered successfully' });
  } catch (error) {
    console.error('Error registering student:', error);
    res.status(500).json({ error: 'An error occurred while registering the student' });
  }
});
  
// Function to handle tutor registration
router.post('/tutor', async (req, res) => {
  try {
    const {
      fullName,
      email,
      password,
      phone,
      address,
      dateOfBirth,
      workplace,
      listOfSubjects,
      description,
      credentialFiles,
      degreeFiles,
      photoId,
    } = req.body;
    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);
    const pool = await poolPromise;

    const request = pool.request();
    request.input('fullName', sql.NVarChar, fullName);
    request.input('email', sql.NVarChar, email);
    request.input('passwordHash', sql.NVarChar, hashedPassword);
    request.input('phone', sql.NVarChar, phone);
    request.input('address', sql.NVarChar, address);
    request.input('dateOfBirth', sql.Date, dateOfBirth);
    request.input('workplace', sql.NVarChar, workplace);
    request.input('listOfSubjects', sql.NVarChar, listOfSubjects);
    request.input('description', sql.NVarChar, description);
    request.input('credentialFiles', sql.NVarChar, JSON.stringify(credentialFiles));
    request.input('degreeFiles', sql.NVarChar, JSON.stringify(degreeFiles));
    request.input('photoId', sql.NVarChar, JSON.stringify(photoId));
    request.input('role', sql.Int, 2); // Assuming 2 is the role for tutors
    request.input('emailVerifyToken', sql.NVarChar, '');
    request.input('forgotPasswordToken', sql.NVarChar, '');
    request.input('verify', sql.Int, 0); // Assuming 0 is the default verify status

    await request.query(`
      INSERT INTO Users (fullName, email, passwordHash, phone, address, dateOfBirth, workplace, listOfSubjects, description, credentialFiles, degreeFiles, photoId, role, emailVerifyToken, forgotPasswordToken, verify)
      VALUES (@fullName, @email, @passwordHash, @phone, @address, @dateOfBirth, @workplace, @listOfSubjects, @description, @credentialFiles, @degreeFiles, @photoId, @role, @emailVerifyToken, @forgotPasswordToken, @verify)
    `);

    res.status(201).json({ message: 'Tutor registered successfully' });
  } catch (error) {
    console.error('Error registering tutor:', error);
    res.status(500).json({ error: 'An error occurred while registering the tutor' });
  }
});

export default router;